# -*- coding: utf-8 -*-

from odoo import api, models, fields, _


class Notification(models.Model):
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _name = 'lgps.notification'

    name = fields.Char(
        required=True,
        string=_("Internal Id"),
        default="Autogenerated on Save",
    )

    description = fields.Text(
        string=_("Description"),
    )

    email_Sent = fields.Html(
        string=_("Email sent")
    )

    processed = fields.Boolean(
        string=_("Processed")
    )

    client_id = fields.Many2one(
        comodel_name="res.partner",
        domain=[
            ('customer', '=', True),
            ('active', '=', True),
            ('is_company', '=', True)
        ],
        ondelete="set null",
        required=True,
    )

    gpsdevice_ids = fields.Many2many(
        comodel_name="lgps.gpsdevice",
    )

    contact_ids = fields.Many2many(
        comodel_name="res.partner",
    )

    rule_id = fields.Many2one(
        comodel_name="lgps.notification_rules",
        ondelete="set null",
        required=True,
        string=_("Rule Type")
    )

    @api.model
    def create(self, vals):
        seq = self.env['ir.sequence'].next_by_code('lgps.notification') or _('New')
        vals['name'] = seq
        return super(Notification, self).create(vals)

    @api.multi
    def copy(self, default=None):
        default = dict(default or {})

        copied_count = self.search_count(
            [('name', '=like', u"Copy of {}%".format(self.name))])
        if not copied_count:
            new_name = u"Copy of {}".format(self.name)
        else:
            new_name = u"Copy of {} ({})".format(self.name, copied_count)

        default['name'] = new_name
        return super(Notification, self).copy(default)

    @api.onchange('client_id')
    def _onchange_clinet_id(self):

        domain = {}
        gpsdevice_ids = []
        contact_ids = []

        values = self.env['lgps.gpsdevice'].search(
            [('client_id', "=", self.client_id.id)]
        )

        for value in values:
            gpsdevice_ids.append(value.id)

        values = self.env['res.partner'].search(
            [
                ('parent_id', "=", self.client_id.id),
                ('type', "=", 'contact')
            ]
        )

        for value in values:
            contact_ids.append(value.id)

        domain = {
            'gpsdevice_ids': [('id', 'in', gpsdevice_ids)],
            'contact_ids': [('id', 'in', contact_ids)],
        }

        return {'domain': domain}
