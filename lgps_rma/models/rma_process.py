# -*- coding: utf-8 -*-

from odoo import api, models, fields, _
import logging

_logger = logging.getLogger(__name__)


class RmaProcess(models.Model):
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _name = 'lgps.rma_process'

    name = fields.Char(
        required=True,
        string=_("Internal Id"),
        default="Autogenerated on Save",
    )
    state = fields.Selection(
        [
            ('reception', _('Reception')),
            ('shipment_to_supplier', _('Shipment to Supplier')),
            ('delivery_to_customer', _('Delivery to Customer')),
            ('done', _('Done'))
        ],
        index=True,
        readonly=True,
        default='reception',
        track_visibility='onchange'
    )

    assigned_to = fields.Many2one(
        required=True,
        comodel_name="hr.employee",
        string=_("Assigned To"),
    )

    client_id = fields.Many2one(
        required=True,
        comodel_name="res.partner",
        string=_("Client"),
        domain=[
            ('customer', '=', True),
            ('is_company', '=', True)
        ],
    )

    gpsdevice_id = fields.Many2one(
        comodel_name="lgps.gpsdevice",
        string=_("Gps Device"),
        ondelete="set null",
        index=True,
    )

    accessories_id = fields.Many2one(
        comodel_name='lgps.accessory',
        ondelete="set null",
        index=True,
    )

    delivery_responsable = fields.Many2one(
        required=True,
        comodel_name="hr.employee",
        string=_("Delivery Responsable"),
    )

    problem = fields.Text(
        string=_("Fail")
    )

    diagnostic = fields.Text(
        string=_("Diagnostic")
    )

    shipped_date = fields.Date(
        string=_("Shipped date")
    )

    track_number = fields.Char(
        string=_("Track Number")
    )
    provider_reference = fields.Char(
        string=_("Provider Reference")
    )
    return_date = fields.Date()

    observations = fields.Text(
        string=_("Observations")
    )

    provider = fields.Selection(
        selection=[
            ("boson", "Boson"),
        ],
        string=_("Provider"),
        track_visibility='onchange',
    )

    apply_to = fields.Selection(
        selection=[
            ("gps_devices", _("Gps Devices")),
            ("accessories", _("Accessories")),
        ],
        default="gps_devices",
        string=_("Apply To")
    )

    coordinator = fields.Many2one(
        required=False,
        comodel_name="res.users",
        string=_("Coordinator"),
    )

    @api.model
    def create(self, values):
        seq = self.env['ir.sequence'].next_by_code('lgps.rma_process') or _('New')
        values['name'] = seq
        return super(RmaProcess, self).create(values)

    @api.onchange('client_id')
    def _onchange_clinet_id(self):

        domain = {}
        gpsdevice_ids = []
        accessory_ids = []

        values = self.env['lgps.gpsdevice'].search([('client_id', "=", self.client_id.id)])
        for value in values:
            gpsdevice_ids.append(value.id)

        values = self.env['lgps.accessory'].search([('client_id', "=", self.client_id.id)])
        for value in values:
            accessory_ids.append(value.id)

        domain = {
            'gpsdevice_id': [('id', 'in', gpsdevice_ids)],
            'accessories_id': [('id', 'in', accessory_ids)],
        }

        return {'domain': domain}

    @api.onchange('apply_to')
    def _onchange_apply_to(self):
        if self.apply_to == 'gps_devices':
            self.accessories_id = False
        if self.apply_to == 'accessories':
            self.gpsdevice_id = False

    def action_shipment_to_supplier(self):
        self.write({'state': 'shipment_to_supplier'})
        return True

    def action_delivery_to_customer(self):
        self.write({'state': 'delivery_to_customer'})
        return True

    def action_done(self):
        self.write({'state': 'done'})

        problem = self.problem if self.problem else 'NA'
        diagnostic = self.diagnostic if self.diagnostic else 'NA'
        track_number = self.track_number if self.track_number else 'NA'
        observations = self.observations if self.observations else 'NA'
        shipped_date = self.shipped_date.strftime('%Y-%m-%d') if self.shipped_date else 'NA'
        return_date = self.return_date.strftime('%Y-%m-%d') if self.return_date else 'NA'

        body = '<br/><b>Proceso de: </b> ' + self.name + '<br/>'
        body += '<br/><b>Fecha:</b> ' + self.create_date.strftime('%Y-%m-%d')
        body += '<br/><b>Entrega:</b> ' + self.assigned_to.name
        body += '<br/><b>Falla:</b> ' + problem
        body += '<br/><b>Diagnóstico:</b> ' + diagnostic
        body += '<br/><b>Fecha Envío:</b> ' + shipped_date
        body += '<br/><b>No. Guía:</b> ' + track_number
        body += '<br/><b>Fecha de Regreso:</b> ' + return_date
        body += '<br/><b>Observaciones:</b> ' + observations

        if self.gpsdevice_id:
            self.gpsdevice_id.message_post(body=body)
        else:
            if self.accessories_id:
                self.accessories_id.message_post(body=body)

        self.sendNotificationEmail(body)
        return True

    def sendNotificationEmail(self, body):

        template = self.env.ref('lgps_rma.rma_finished_email_template')
        res = self.env['mail.template'].browse(template.id).send_mail(self.id)


    def testMail(self):
        mail_server = self.env['ir.mail_server'].search([])
        for ms in mail_server:
            _logger.warning('Servidor %s', ms)
