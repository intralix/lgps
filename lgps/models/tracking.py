# -*- coding: utf-8 -*-
from odoo import api, models, fields, _
from odoo.exceptions import UserError
import logging
_logger = logging.getLogger(__name__)


class Tracking(models.Model):
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _name = 'lgps.tracking'

    name = fields.Char(
        required=True,
        string=_("Tracking Id"),
        default="Autogenerated on Save"
    )

    client_id = fields.Many2one(
        comodel_name="res.partner",
        string=_("Client Account"),
        domain=[
            ('customer', '=', True),
            ('active', '=', True),
            ('is_company', '=', True)
        ],
        required=True,
    )

    gpsdevice_id = fields.Many2one(
        comodel_name="lgps.gpsdevice",
        string=_("Gps Device"),
        index=True,
        required=True,
    )

    # applicant_id = fields.Many2one(
    #     comodel_name="res.partner",
    #     string=_("Account Contact"),
    #     domain=[
    #         ('customer', '=', True),
    #         ('active', '=', True),
    #         ('company_type', '=', 'person')
    #     ],
    # )

    applicant = fields.Char(
        string=_("Applicant"),
    )

    state = fields.Selection(
        [
            ('registered', _('Registrado')),
            ('active', _('Activo')),
            ('paused', _('Detenido')),
            ('finished', _('Finalizado')),
            ('billed', _('Facturado')),
        ],
        string=_("State"),
        default="registered",
        track_visibility='onchange',
        required=True,
    )

    category = fields.Selection(
        [
            ('event', _('Per Event')),
            ('permanent', _('Permanent')),
            ('uninterrupted ', _('Uninterrupted')),
        ],
        string=_("Category"),
        default="event",
        required=True,
        index=True,
    )

    driver = fields.Char(
        string=_("Driver"),
    )

    phone = fields.Text(
        string=_("Phones"),
    )

    notifications = fields.Char(
        string=_("Email Notifications"),
    )

    notify = fields.Boolean(
        string=_("Notify Client"),
        default=False
    )

    initial_date = fields.Datetime(
        default=fields.Datetime.now,
        string=_("Initial Date"),
    )

    final_date = fields.Datetime(
        string=_("Final Date"),
    )

    origin = fields.Text(
        string=_("Origin"),
        required=True,
    )

    destination = fields.Text(
        string=_("Destination"),
        required=True,
    )

    route = fields.Text(
        string=_("Route"),
    )

    observations = fields.Text(
        string=_("Observations"),
    )

    emails = fields.Text(
        string=_("Additional Emails"),
    )

    start_date = fields.Datetime(
        string=_("Activity Started at"),
        readonly=True
    )

    end_date = fields.Datetime(
        string=_("Activity finished at"),
        readonly=True
    )

    tracking_log_ids = fields.One2many(
        comodel_name="lgps.tracking_logs",
        inverse_name="tracking_id",
        string=_("Logs"),
    )

    freight_weight = fields.Float(
        digits=(10, 1),
        string=_("Load Weight"),
        help=_("Freight weight in Kilos")
    )

    freight_dimensions = fields.Float(
        digits=(10, 1),
        string=_("Freight dimensions"),
        help=_("Freight dimensions in meters")
    )

    freight_cost = fields.Float(
        digits=(10, 2),
        string=_("Freight cost"),
        help=_("Freight costs")
    )

    comment_period = fields.Integer(
        string=_('Comment Period'),
        default=0,
    )

    @api.model
    def create(self, vals):
        seq = self.env['ir.sequence'].next_by_code('lgps.tracking') or '/'
        vals['name'] = seq
        return super(Tracking, self).create(vals)

    def button_do_active(self):
        for tracking in self:
            # tracking.state = 'active'
            _logger.warning('self %', self)
            user = self.env['res.users'].search([('name', '=', self.env.user.name)])
            _logger.warning('user: %', user)
            # _logger.warning('user name: %', user.name)
            # _logger.warning('user id: %', user.id)
            # log_object = self.env['lgps.tracking_logs']
            # user.id
            # employee_id = self.env[''].search()
            raise UserError('Stop execution')

            # dictionary = {
            #     'name': 'Automatic Generated',
            #     'comment': 'Monitoreo Iniciado',
            #     'comment_date': fields.Datetime.now,
            #     'employee_id': device.client_id.id,
            #     'email_sent': device.id,
            #     'tracking_id': self.destination_gpsdevice_ids.id,
            #     'vehicle_location': self.operation_mode,
            # }
            # device_log = log_object.create(dictionary)

        return True

    def button_do_pause(self):
        for tracking in self:
            tracking.state = 'paused'
        return True

    def button_do_finish(self):
        for tracking in self:
            tracking.state = 'finished'
        return True
